{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5590908d-7694-4a41-99ef-f33cfd07c4fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder, MinMaxScaler\n",
    "\n",
    "def main():\n",
    "    st.title('Naive Bayes Classification')\n",
    "    \n",
    "    # Upload dataset\n",
    "    st.subheader('Upload your dataset (CSV format)')\n",
    "    uploaded_file = st.file_uploader(\"Choose a file\", type=\"csv\")\n",
    "    if uploaded_file is not None:\n",
    "        df = pd.read_csv(uploaded_file)\n",
    "        st.write(\"### Dataset Preview\")\n",
    "        st.write(df.head())\n",
    "        \n",
    "        # Select features and target column\n",
    "        st.sidebar.subheader('Select Features and Target')\n",
    "        features = st.sidebar.multiselect('Features', df.columns)\n",
    "        target = st.sidebar.selectbox('Target', df.columns)\n",
    "        \n",
    "        if features and target:\n",
    "            X = df[features]\n",
    "            y = df[target]\n",
    "            \n",
    "            # Encode labels if they are not numeric\n",
    "            label_encoder = LabelEncoder()\n",
    "            y = label_encoder.fit_transform(y)\n",
    "            \n",
    "            # Split the dataset into training and test sets\n",
    "            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "            \n",
    "            # Standardize the features for GaussianNB\n",
    "            scaler = StandardScaler()\n",
    "            X_train = scaler.fit_transform(X_train)\n",
    "            X_test = scaler.transform(X_test)\n",
    "            \n",
    "            # Initialize and train Gaussian Naive Bayes\n",
    "            gnb = GaussianNB()\n",
    "            gnb.fit(X_train, y_train)\n",
    "            y_pred_gnb = gnb.predict(X_test)\n",
    "            \n",
    "            # Display results\n",
    "            st.write(\"### Gaussian Naive Bayes\")\n",
    "            st.write(f\"Accuracy: {accuracy_score(y_test, y_pred_gnb)}\")\n",
    "            st.text(\"Classification Report:\\n\" + classification_report(y_test, y_pred_gnb))\n",
    "            \n",
    "            # Prepare data for Multinomial Naive Bayes\n",
    "            min_max_scaler = MinMaxScaler()\n",
    "            X_train_mnb = min_max_scaler.fit_transform(X_train)\n",
    "            X_test_mnb = min_max_scaler.transform(X_test)\n",
    "            \n",
    "            mnb = MultinomialNB(alpha=1.0)\n",
    "            mnb.fit(X_train_mnb, y_train)\n",
    "            y_pred_mnb = mnb.predict(X_test_mnb)\n",
    "            \n",
    "            st.write(\"\\n### Multinomial Naive Bayes\")\n",
    "            st.write(f\"Accuracy: {accuracy_score(y_test, y_pred_mnb)}\")\n",
    "            st.text(\"Classification Report:\\n\" + classification_report(y_test, y_pred_mnb))\n",
    "            \n",
    "            # Prepare data for Bernoulli Naive Bayes\n",
    "            X_train_bin = (X_train > 0).astype(int)\n",
    "            X_test_bin = (X_test > 0).astype(int)\n",
    "            \n",
    "            bnb = BernoulliNB(alpha=1.0)\n",
    "            bnb.fit(X_train_bin, y_train)\n",
    "            y_pred_bnb = bnb.predict(X_test_bin)\n",
    "            \n",
    "            st.write(\"\\n### Bernoulli Naive Bayes\")\n",
    "            st.write(f\"Accuracy: {accuracy_score(y_test, y_pred_bnb)}\")\n",
    "            st.text(\"Classification Report:\\n\" + classification_report(y_test, y_pred_bnb))\n",
    "        else:\n",
    "            st.write(\"Please select features and target column.\")\n",
    "    else:\n",
    "        st.write(\"Upload a CSV file to get started.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
